using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Noggog;

namespace MusicFixer
{
    public class Program
    {
        static Lazy<Settings> Settings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "MusicFixer.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if (Settings.Value.TargetMods.Count == 0)
            {
                System.Console.WriteLine("Must at least specify one target mod in order to do anything.");
                return;
            }

            var targetMods = state.LoadOrder.ListedOrder
                .Select(listing => listing.Mod)
                .NotNull()
                .Where(plugin => Settings.Value.TargetMods.Contains(plugin.ModKey))
                .ToArray();

            System.Console.WriteLine("Files to map to:");
            foreach (var modKey in targetMods.Select(x => x.ModKey))
            {
                System.Console.WriteLine($"  {modKey}");
            }

            var targetModsLinkCache = targetMods.ToImmutableLinkCache();

            uint interiorCellCount = 0;
            foreach (var cell in state.LoadOrder.PriorityOrder.Cell().WinningOverrides())
            {
                // See if the cell is in the target mods, and retrieve the winning record from them if it is
                if (targetModsLinkCache.TryResolveContext<ICell, ICellGetter>(cell.FormKey, out var cellContext)) {
                    interiorCellCount++;

                    var modifiedCell = state.PatchMod.Cells.GetOrAddAsOverride(cell);
                    Console.WriteLine(cellContext.Record.Music);
                };
            };

            Console.WriteLine($"Patched {interiorCellCount} interior cells");
        }
    }
}
